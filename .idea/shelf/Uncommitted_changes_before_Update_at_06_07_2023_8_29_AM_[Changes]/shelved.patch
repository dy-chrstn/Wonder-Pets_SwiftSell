Index: app/src/main/java/com/example/scanit/ProductViewActivity.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.scanit\r\n\r\nimport android.content.Intent\r\nimport android.graphics.Bitmap\r\nimport android.graphics.Canvas\r\nimport android.net.Uri\r\nimport androidx.appcompat.app.AppCompatActivity\r\nimport android.os.Bundle\r\nimport android.os.Environment\r\nimport android.view.View\r\nimport android.widget.ImageButton\r\nimport android.widget.ImageView\r\nimport android.widget.TextView\r\nimport android.widget.Toast\r\nimport androidx.appcompat.widget.LinearLayoutCompat\r\nimport androidx.core.app.ShareCompat\r\nimport androidx.core.content.FileProvider\r\nimport com.squareup.picasso.Picasso\r\nimport java.io.File\r\nimport java.io.FileOutputStream\r\nimport java.io.OutputStream\r\n\r\nclass ProductViewActivity : AppCompatActivity() {\r\n    private lateinit var imageViewProduct: ImageView\r\n    private lateinit var textViewItemName: TextView\r\n    private lateinit var textViewItemPrice: TextView\r\n    private lateinit var textViewItemQuantity: TextView\r\n    private lateinit var textViewItemBarcode: TextView\r\n    private lateinit var textViewItemCategory: TextView\r\n    private lateinit var textViewItemExpiry: TextView\r\n    private lateinit var textViewItemCost: TextView\r\n    private lateinit var shareBtn: ImageButton\r\n    private lateinit var prodLayout : LinearLayoutCompat\r\n    override fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r\n        setContentView(R.layout.activity_product_view)\r\n\r\n        imageViewProduct = findViewById(R.id.prodImg)\r\n        textViewItemName = findViewById(R.id.prodName)\r\n        textViewItemPrice = findViewById(R.id.prodPrice)\r\n        textViewItemQuantity = findViewById(R.id.prodQty)\r\n        textViewItemBarcode = findViewById(R.id.prodBarcode)\r\n        textViewItemCategory = findViewById(R.id.prodCategory)\r\n        textViewItemExpiry = findViewById(R.id.prodExpiry)\r\n        textViewItemCost = findViewById(R.id.prodCost)\r\n        shareBtn = findViewById(R.id.share)\r\n        prodLayout = findViewById(R.id.prodViewLayout)\r\n\r\n        val searchResults = intent.getSerializableExtra(\"searchResults\")\r\n        //for opening product view via search\r\n        if(searchResults is List<*>){\r\n\r\n        }else{\r\n            //for opening product view via selection in product list\r\n            val selectedProduct = intent.getParcelableExtra<Product>(\"selectedProduct\")\r\n            selectedProduct?.let { product ->\r\n                Picasso.get().load(product.imageUrl)\r\n                    .placeholder(R.drawable.image_loader)\r\n                    .error(R.drawable.error)\r\n                    .into(imageViewProduct)\r\n\r\n                textViewItemName.text = product.itemName\r\n                textViewItemPrice.text = \"₱${product.itemPrice}.00\"\r\n                textViewItemQuantity.text = product.itemQuantity.toString()\r\n                textViewItemBarcode.text = product.itemBarcode\r\n                textViewItemCategory.text = product.itemCategory\r\n                textViewItemExpiry.text = product.itemExpiry\r\n                textViewItemCost.text = \"₱${product.itemCost}.00\"\r\n            }\r\n        }\r\n\r\n        val backButton = findViewById<ImageButton>(R.id.backButton)\r\n        backButton.setOnClickListener {\r\n            finish()\r\n        }\r\n\r\n        shareBtn.setOnClickListener {\r\n            val result = \"check out my amazing result!!\"\r\n            val uri = takeScreenshot(prodLayout)\r\n\r\n            if (uri != null) {\r\n                val shareIntent = ShareCompat.IntentBuilder.from(this@ProductViewActivity)\r\n                    .setType(\"image/*\")\r\n                    .setStream(uri)\r\n                    .setText(result)\r\n                    .setChooserTitle(\"Share Result\")\r\n                    .createChooserIntent()\r\n\r\n                shareIntent.addFlags(Intent.FLAG_GRANT_READ_URI_PERMISSION) // Add this line to grant read permission to the receiving app\r\n                startActivity(shareIntent)\r\n            } else {\r\n                Toast.makeText(this@ProductViewActivity, \"Failed to take screenshot\", Toast.LENGTH_SHORT).show()\r\n            }\r\n        }\r\n    }\r\n    private fun takeScreenshot(view: View): Uri? {\r\n        val screenshot = Bitmap.createBitmap(view.width, view.height, Bitmap.Config.ARGB_8888)\r\n        val canvas = Canvas(screenshot)\r\n        view.draw(canvas)\r\n\r\n        val imageFile = File(getExternalFilesDir(Environment.DIRECTORY_PICTURES), \"screenshot.jpg\")\r\n        val outputStream: OutputStream? = FileOutputStream(imageFile)\r\n        screenshot.compress(Bitmap.CompressFormat.JPEG, 90, outputStream)\r\n        outputStream?.close()\r\n\r\n        return FileProvider.getUriForFile(this@ProductViewActivity, \"com.example.scanit.fileprovider\", imageFile)\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/scanit/ProductViewActivity.kt b/app/src/main/java/com/example/scanit/ProductViewActivity.kt
--- a/app/src/main/java/com/example/scanit/ProductViewActivity.kt	(revision 0752c8b276dccfee475027f7fd6433b28ef7af90)
+++ b/app/src/main/java/com/example/scanit/ProductViewActivity.kt	(date 1688601846870)
@@ -67,6 +67,7 @@
                 textViewItemExpiry.text = product.itemExpiry
                 textViewItemCost.text = "₱${product.itemCost}.00"
             }
+            Toast.makeText(this,"${intent.getStringExtra("itemName")}",Toast.LENGTH_SHORT).show()
         }
 
         val backButton = findViewById<ImageButton>(R.id.backButton)
Index: app/src/main/java/com/example/scanit/BarcodeScannerActivity.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.scanit\r\n\r\nimport ScanItSharedPreferences\r\nimport android.Manifest\r\nimport android.content.Context\r\nimport android.content.Intent\r\nimport android.content.pm.PackageManager\r\nimport android.graphics.BitmapFactory\r\nimport android.hardware.camera2.CameraAccessException\r\nimport android.hardware.camera2.CameraManager\r\nimport android.net.Uri\r\nimport android.os.Bundle\r\nimport android.provider.MediaStore\r\nimport android.widget.ImageButton\r\nimport android.widget.Toast\r\nimport androidx.activity.result.contract.ActivityResultContracts\r\nimport androidx.appcompat.app.AppCompatActivity\r\nimport androidx.core.app.ActivityCompat\r\nimport androidx.core.content.ContextCompat\r\nimport com.google.android.gms.vision.Frame\r\nimport com.google.android.gms.vision.barcode.Barcode\r\nimport com.google.android.gms.vision.barcode.BarcodeDetector\r\nimport com.google.firebase.database.*\r\nimport com.google.zxing.ResultPoint\r\nimport com.journeyapps.barcodescanner.BarcodeCallback\r\nimport com.journeyapps.barcodescanner.BarcodeResult\r\nimport com.journeyapps.barcodescanner.CaptureManager\r\nimport com.journeyapps.barcodescanner.DecoratedBarcodeView\r\n\r\nclass BarcodeScannerActivity : AppCompatActivity() {\r\n    private lateinit var barcodeView: DecoratedBarcodeView\r\n    private lateinit var captureManager: CaptureManager\r\n    private lateinit var databaseReference: DatabaseReference\r\n    private lateinit var uploadButton: ImageButton\r\n    private var cameraId: String? = null\r\n    private var cameraManager: CameraManager? = null\r\n    private lateinit var sharedPreferences: ScanItSharedPreferences\r\n\r\n    private val galleryLauncher =\r\n        registerForActivityResult(ActivityResultContracts.StartActivityForResult()) { result ->\r\n            if (result.resultCode == RESULT_OK) {\r\n                val data: Intent? = result.data\r\n                val imageUri: Uri? = data?.data\r\n                imageUri?.let {\r\n                    val imagePath = getImagePathFromUri(imageUri)\r\n                    // ... continue with image processing logic\r\n\r\n                    // Pass the image path to the barcode detection method\r\n                    detectBarcodeFromImage(imagePath)\r\n                }\r\n            }\r\n        }\r\n\r\n    override fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r\n        sharedPreferences = ScanItSharedPreferences.getInstance(this@BarcodeScannerActivity)\r\n        var userName = sharedPreferences.getUsername()\r\n        setContentView(R.layout.activity_scan_add_pos)\r\n\r\n        // Initialize database reference\r\n        databaseReference = FirebaseDatabase.getInstance().getReference(\"$userName/Products\")\r\n\r\n        barcodeView = findViewById(R.id.barcode_scanner)\r\n\r\n        // Initialize CaptureManager\r\n        captureManager = CaptureManager(this, barcodeView)\r\n        captureManager.initializeFromIntent(intent, savedInstanceState)\r\n        captureManager.decode()\r\n\r\n        cameraManager = getSystemService(Context.CAMERA_SERVICE) as CameraManager\r\n        cameraId = cameraManager?.cameraIdList?.get(0)\r\n\r\n        // Set the barcode callback\r\n        barcodeView.decodeContinuous(object : BarcodeCallback {\r\n            override fun barcodeResult(result: BarcodeResult?) {\r\n                result?.text?.let { itemBarcode ->\r\n                    fetchItemData(itemBarcode)\r\n                }\r\n            }\r\n\r\n            override fun possibleResultPoints(resultPoints: MutableList<ResultPoint>?) {\r\n                // Handle possible result points\r\n            }\r\n        })\r\n\r\n        // Set up the upload button\r\n        uploadButton = findViewById(R.id.uploadButton)\r\n        uploadButton.setOnClickListener {\r\n            openGalleryForImage()\r\n        }\r\n\r\n        // Set up the flashlight button\r\n        val button = findViewById<ImageButton>(R.id.flashlightButton)\r\n        button.setOnClickListener {\r\n            toggleFlashlight()\r\n        }\r\n    }\r\n\r\n    private fun openGalleryForImage() {\r\n        val intent = Intent(Intent.ACTION_PICK)\r\n        intent.type = \"image/*\"\r\n        galleryLauncher.launch(intent)\r\n    }\r\n\r\n    private fun getImagePathFromUri(uri: Uri): String? {\r\n        val projection = arrayOf(MediaStore.Images.Media.DATA)\r\n        val cursor = contentResolver.query(uri, projection, null, null, null)\r\n        cursor?.use {\r\n            if (it.moveToFirst()) {\r\n                val columnIndex = it.getColumnIndexOrThrow(MediaStore.Images.Media.DATA)\r\n                return it.getString(columnIndex)\r\n            }\r\n        }\r\n        return null\r\n    }\r\n\r\n    private fun detectBarcodeFromImage(imagePath: String?) {\r\n        val barcodeDetector = BarcodeDetector.Builder(this)\r\n            .setBarcodeFormats(Barcode.EAN_13)\r\n            .build()\r\n\r\n        if (!barcodeDetector.isOperational) {\r\n            showToast(\"Could not set up barcode detector\")\r\n            return\r\n        }\r\n\r\n        val bitmap = BitmapFactory.decodeFile(imagePath)\r\n        val frame = Frame.Builder().setBitmap(bitmap).build()\r\n        val barcodes = barcodeDetector.detect(frame)\r\n\r\n        if (barcodes.size() > 0) {\r\n            val barcode = barcodes.valueAt(0)\r\n            val barcodeValue = barcode.rawValue\r\n\r\n            // Query the database to check if the barcode exists\r\n            val query = databaseReference.orderByChild(\"itemBarcode\").equalTo(barcodeValue)\r\n            query.addListenerForSingleValueEvent(object : ValueEventListener {\r\n                override fun onDataChange(dataSnapshot: DataSnapshot) {\r\n                    if (dataSnapshot.exists()) {\r\n                        val itemDataSnapshot = dataSnapshot.children.first()\r\n\r\n                        val itemName = itemDataSnapshot.child(\"itemName\").getValue(String::class.java)\r\n                        val itemPrice = itemDataSnapshot.child(\"itemPrice\").getValue(Int::class.java)\r\n                        val itemQty = itemDataSnapshot.child(\"itemQuantity\").getValue(Int::class.java)\r\n                        val itemImg = itemDataSnapshot.child(\"itemImage\").getValue(String::class.java)\r\n                        val itemCost = itemDataSnapshot.child(\"itemCost\").getValue(Int::class.java)\r\n                        val itemExpiry = itemDataSnapshot.child(\"itemExpiry\").getValue(String::class.java)\r\n                        val itemCode = itemDataSnapshot.child(\"itemBarcode\").getValue(String::class.java)\r\n\r\n                        val intent = Intent(applicationContext, ProductViewActivity::class.java)\r\n                        intent.putExtra(\"itemName\", itemName)\r\n                        intent.putExtra(\"itemPrice\", itemPrice)\r\n                        intent.putExtra(\"itemQuantity\", itemQty)\r\n                        intent.putExtra(\"itemImage\", itemImg)\r\n                        intent.putExtra(\"itemCost\", itemCost)\r\n                        intent.putExtra(\"itemExpiry\", itemExpiry)\r\n                        intent.putExtra(\"itemBarcode\", itemCode)\r\n\r\n                        startActivity(intent)\r\n                    } else {\r\n                        // Barcode does not exist in the database\r\n                        // Handle the case when barcode does not exist\r\n                        // ...\r\n                        showToast(\"Barcode does not exist in the database\")\r\n                    }\r\n                }\r\n\r\n                override fun onCancelled(databaseError: DatabaseError) {\r\n                    // Handle database error\r\n                    // ...\r\n                    showToast(\"Error querying the database\")\r\n                }\r\n            })\r\n        } else {\r\n            showToast(\"No barcode detected in the image\")\r\n        }\r\n    }\r\n\r\n    private fun fetchItemData(itemBarcode: String) {\r\n        val query = databaseReference.orderByChild(\"itemBarcode\").equalTo(itemBarcode)\r\n\r\n        query.addListenerForSingleValueEvent(object : ValueEventListener {\r\n            override fun onDataChange(dataSnapshot: DataSnapshot) {\r\n                if (dataSnapshot.exists()) {\r\n                    val itemDataSnapshot = dataSnapshot.children.first()\r\n\r\n                    val itemName = itemDataSnapshot.child(\"itemName\").getValue(String::class.java)\r\n                    val itemPrice = itemDataSnapshot.child(\"itemPrice\").getValue(Int::class.java)\r\n                    val itemQty = itemDataSnapshot.child(\"itemQuantity\").getValue(Int::class.java)\r\n                    val itemImg = itemDataSnapshot.child(\"itemImage\").getValue(String::class.java)\r\n                    val itemCost = itemDataSnapshot.child(\"itemCost\").getValue(Int::class.java)\r\n                    val itemExpiry = itemDataSnapshot.child(\"itemExpiry\").getValue(String::class.java)\r\n                    val itemCode = itemDataSnapshot.child(\"itemBarcode\").getValue(String::class.java)\r\n\r\n                    val intent = Intent(applicationContext, ProductViewActivity::class.java)\r\n                    intent.putExtra(\"itemName\", itemName)\r\n                    intent.putExtra(\"itemPrice\", itemPrice)\r\n                    intent.putExtra(\"itemQuantity\", itemQty)\r\n                    intent.putExtra(\"itemImage\", itemImg)\r\n                    intent.putExtra(\"itemCost\", itemCost)\r\n                    intent.putExtra(\"itemExpiry\", itemExpiry)\r\n                    intent.putExtra(\"itemBarcode\", itemCode)\r\n\r\n                    startActivity(intent)\r\n                } else {\r\n\r\n                    val intent = Intent(applicationContext, AddProductActivity::class.java)\r\n                    intent.putExtra(\"itemBarcode\", itemBarcode)\r\n                    startActivity(intent)\r\n\r\n//                    Toast.makeText(this@BarcodeScannerActivity, \"Barcode not found in the database\", Toast.LENGTH_SHORT).show()\r\n                    // Barcode not found in the database\r\n                    // Handle the case when barcode is not found\r\n                    // ...\r\n                }\r\n            }\r\n\r\n            override fun onCancelled(databaseError: DatabaseError) {\r\n                // Handle database error\r\n                // ...\r\n            }\r\n        })\r\n    }\r\n\r\n    private fun toggleFlashlight() {\r\n        val cameraPermission = Manifest.permission.CAMERA\r\n        if (ContextCompat.checkSelfPermission(this, cameraPermission) != PackageManager.PERMISSION_GRANTED) {\r\n            ActivityCompat.requestPermissions(this, arrayOf(cameraPermission), 1)\r\n        } else {\r\n            try {\r\n                val cameraId = cameraManager?.cameraIdList?.firstOrNull()\r\n                if (cameraId != null) {\r\n                    cameraManager?.setTorchMode(cameraId, true)\r\n                    showToast(\"Flashlight turned on\")\r\n                }\r\n            } catch (e: CameraAccessException) {\r\n                e.printStackTrace()\r\n                showToast(\"Failed to turn on flashlight\")\r\n            }\r\n        }\r\n    }\r\n\r\n    private fun showToast(message: String) {\r\n        Toast.makeText(this, message, Toast.LENGTH_SHORT).show()\r\n    }\r\n\r\n    override fun onResume() {\r\n        super.onResume()\r\n        // Check and request camera permission if not granted\r\n        if (ContextCompat.checkSelfPermission(\r\n                this,\r\n                Manifest.permission.CAMERA\r\n            ) != PackageManager.PERMISSION_GRANTED\r\n        ) {\r\n            ActivityCompat.requestPermissions(\r\n                this,\r\n                arrayOf(Manifest.permission.CAMERA),\r\n                CAMERA_PERMISSION_REQUEST\r\n            )\r\n        } else {\r\n            captureManager.onResume()\r\n        }\r\n    }\r\n\r\n    override fun onPause() {\r\n        super.onPause()\r\n        captureManager.onPause()\r\n    }\r\n\r\n    override fun onDestroy() {\r\n        super.onDestroy()\r\n        captureManager.onDestroy()\r\n    }\r\n\r\n    override fun onRequestPermissionsResult(\r\n        requestCode: Int,\r\n        permissions: Array<out String>,\r\n        grantResults: IntArray\r\n    ) {\r\n        super.onRequestPermissionsResult(requestCode, permissions, grantResults)\r\n        if (requestCode == CAMERA_PERMISSION_REQUEST) {\r\n            if (grantResults.isNotEmpty() && grantResults[0] == PackageManager.PERMISSION_GRANTED) {\r\n                captureManager.onResume()\r\n            } else {\r\n                // Handle camera permission denial\r\n                // ...\r\n            }\r\n        }\r\n    }\r\n\r\n    companion object {\r\n        private const val CAMERA_PERMISSION_REQUEST = 100\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/scanit/BarcodeScannerActivity.kt b/app/src/main/java/com/example/scanit/BarcodeScannerActivity.kt
--- a/app/src/main/java/com/example/scanit/BarcodeScannerActivity.kt	(revision 0752c8b276dccfee475027f7fd6433b28ef7af90)
+++ b/app/src/main/java/com/example/scanit/BarcodeScannerActivity.kt	(date 1688601651907)
@@ -35,7 +35,6 @@
     private var cameraId: String? = null
     private var cameraManager: CameraManager? = null
     private lateinit var sharedPreferences: ScanItSharedPreferences
-
     private val galleryLauncher =
         registerForActivityResult(ActivityResultContracts.StartActivityForResult()) { result ->
             if (result.resultCode == RESULT_OK) {
@@ -53,8 +52,8 @@
 
     override fun onCreate(savedInstanceState: Bundle?) {
         super.onCreate(savedInstanceState)
-        sharedPreferences = ScanItSharedPreferences.getInstance(this@BarcodeScannerActivity)
-        var userName = sharedPreferences.getUsername()
+        sharedPreferences = ScanItSharedPreferences.getInstance(this)
+        val userName = sharedPreferences.getUsername().toString()
         setContentView(R.layout.activity_scan_add_pos)
 
         // Initialize database reference
