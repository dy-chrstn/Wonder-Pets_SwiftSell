Index: app/src/main/java/com/example/scanit/PosActivity.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.scanit\r\n\r\nimport android.annotation.SuppressLint\r\nimport android.content.Intent\r\nimport androidx.appcompat.app.AppCompatActivity\r\nimport android.os.Bundle\r\nimport android.text.Editable\r\nimport android.text.TextWatcher\r\nimport android.widget.Button\r\nimport android.widget.EditText\r\nimport android.widget.ImageButton\r\nimport android.widget.TextView\r\nimport android.widget.Toast\r\nimport androidx.activity.result.ActivityResultLauncher\r\nimport androidx.activity.result.contract.ActivityResultContracts\r\nimport androidx.lifecycle.ViewModelProvider\r\nimport androidx.recyclerview.widget.LinearLayoutManager\r\nimport androidx.recyclerview.widget.RecyclerView\r\nimport com.example.scanit.buyViewModel\r\nimport com.google.firebase.database.DataSnapshot\r\nimport com.google.firebase.database.DatabaseError\r\nimport com.google.firebase.database.DatabaseReference\r\nimport com.google.firebase.database.FirebaseDatabase\r\nimport com.google.firebase.database.Query\r\nimport com.google.firebase.database.ValueEventListener\r\nimport java.util.Scanner\r\n\r\nclass PosActivity : AppCompatActivity() {\r\n\r\n    private lateinit var databaseReference: DatabaseReference\r\n    private lateinit var requestCamera: ActivityResultLauncher<String>\r\n    private lateinit var recyclerView: RecyclerView\r\n    private lateinit var adapter: buyAdapter\r\n    private lateinit var layoutManager: RecyclerView.LayoutManager\r\n    private lateinit var prodBCSelect: TextView\r\n    private var priceProd: Int = 0\r\n    private lateinit var viewModel: buyViewModel\r\n\r\n    private val itemList: MutableList<buyModel> = mutableListOf() // Declaration and initialization of itemList\r\n\r\n    @SuppressLint(\"WrongViewCast\")\r\n    override fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r\n        setContentView(R.layout.activity_pos)\r\n        val qnty: TextView = findViewById(R.id.Quant)\r\n        val totalProdSelect: TextView = findViewById(R.id.totalProd)\r\n        prodBCSelect = findViewById(R.id.barText)\r\n        val prodNameSelect: TextView = findViewById(R.id.prodname)\r\n        val prodPriceSelect: TextView = findViewById(R.id.price)\r\n\r\n        // Initialize the BuyViewModel\r\n        viewModel = ViewModelProvider(this).get(buyViewModel::class.java)\r\n\r\n        // Initialize the adapter with the BuyViewModel\r\n        adapter = buyAdapter(ArrayList(itemList))\r\n\r\n        recyclerView = findViewById(R.id.listBuy)\r\n        layoutManager = LinearLayoutManager(this)\r\n\r\n\r\n        recyclerView.layoutManager = layoutManager\r\n        recyclerView.adapter = adapter\r\n\r\n        databaseReference = FirebaseDatabase.getInstance().getReference(\"Products\")\r\n\r\n        val BCGet  = intent.getStringExtra(\"itemBarcode\") ?: \"\"\r\n        val BCprod: String = BCGet.toString()\r\n        val nameProd = intent.getStringExtra(\"itemName\") ?: \"\"\r\n        priceProd = intent.getIntExtra(\"itemPrice\", 0) ?: 0\r\n        val itemQuantity = intent.getIntExtra(\"itemQuantity\", 0) ?: \"\"\r\n\r\n        val amountTot = findViewById<TextView>(R.id.totPrice)\r\n        val payAmount = findViewById<EditText>(R.id.AmountPay)\r\n        val payChange = findViewById<TextView>(R.id.changeText)\r\n\r\n        val plusBtn = findViewById<ImageButton>(R.id.plus)\r\n        val minusBtn = findViewById<ImageButton>(R.id.minus)\r\n        val scanBtn = findViewById<Button>(R.id.ScanBar)\r\n        val btnAdd = findViewById<Button>(R.id.addBuy)\r\n\r\n        adapter.updateItems(viewModel.getItems())\r\n        prodNameSelect.text = nameProd\r\n        val priceText = priceProd\r\n        prodPriceSelect.text = \"\\u20B1 $priceText\"\r\n        prodBCSelect.text = BCprod\r\n        val qtyGet = itemQuantity.toString()\r\n\r\n        val scanner = Scanner(System.`in`)\r\n\r\n        // Start a new thread to continuously listen for input\r\n        payAmount.addTextChangedListener(object : TextWatcher {\r\n            override fun beforeTextChanged(s: CharSequence?, start: Int, count: Int, after: Int) {\r\n                // Do nothing\r\n            }\r\n\r\n            override fun onTextChanged(s: CharSequence?, start: Int, before: Int, count: Int) {\r\n                // Handle text change here\r\n                val input = s.toString()\r\n\r\n                if (input.isNotEmpty()) { // Check if input is not empty\r\n                    try {\r\n                        // Value is a valid integer, perform your desired actions here\r\n                        val resultChange =\r\n                            payAmount.text.toString().toDouble() - amountTot.text.toString()\r\n                                .toDouble()\r\n                        payChange.text = resultChange.toString()\r\n                    } catch (e: NumberFormatException) {\r\n                        // Input is not a valid integer\r\n                        println(\"Invalid input: $input\")\r\n                    }\r\n                }\r\n\r\n                // Perform your desired actions with the input here\r\n                // For example, you can check for specific conditions or trigger events based on the input\r\n            }\r\n\r\n            override fun afterTextChanged(s: Editable?) {\r\n                // Do nothing\r\n            }\r\n        })\r\n\r\n        prodBCSelect.addTextChangedListener(object : TextWatcher {\r\n            override fun beforeTextChanged(s: CharSequence?, start: Int, count: Int, after: Int) {\r\n                // Do nothing\r\n            }\r\n\r\n            override fun onTextChanged(s: CharSequence?, start: Int, before: Int, count: Int) {\r\n                // Handle text change here\r\n                val input = s.toString()\r\n\r\n                if (input.isNotEmpty()) { // Check if input is not empty\r\n                    try {\r\n                        // Value is a valid integer, perform your desired actions here\r\n\r\n                    } catch (e: NumberFormatException) {\r\n                        // Input is not a valid integer\r\n                    }\r\n                }\r\n\r\n                // Perform your desired actions with the input here\r\n                // For example, you can check for specific conditions or trigger events based on the input\r\n            }\r\n\r\n            override fun afterTextChanged(s: Editable?) {\r\n                // Do nothing\r\n                val barcode = s.toString().trim()\r\n                if (barcode.isNotEmpty()) {\r\n                    fetchInformationFromFirebase(barcode)\r\n                }\r\n\r\n            }\r\n        })\r\n\r\n        btnAdd.setOnClickListener {\r\n            val qntyVal = qnty.text.toString().toInt()\r\n\r\n            val barcode = prodBCSelect.text.toString()\r\n            val name = prodNameSelect.text.toString()\r\n            val quantity = qntyVal.toString().toInt()\r\n            val price = priceProd.toString().toDouble()\r\n            val total = quantity * price\r\n\r\n            // Create a new Item object\r\n            val item = buyModel(barcode, name, quantity, price, total)\r\n\r\n            // Add the new item to the list\r\n            viewModel.addItem(item)\r\n\r\n            // Update the adapter with the updated list from the BuyViewModel\r\n            adapter.updateItems(viewModel.getItems())\r\n\r\n            adapter.notifyDataSetChanged()\r\n            var totalPrice = 0.0\r\n            for (i in itemList) {\r\n                totalPrice += i.itemTotal\r\n                amountTot.text = totalPrice.toString()\r\n            }\r\n\r\n            // Update the adapter with the updated list\r\n            //adapter.updateItems(itemList)\r\n        }\r\n\r\n        plusBtn.setOnClickListener {\r\n            val qntyVal = qnty.text.toString().toInt()\r\n            if (qntyVal != qtyGet.toInt()) {\r\n                val updatedValue = qntyVal + 1\r\n                qnty.text = updatedValue.toString()\r\n                val updTotal = priceProd * updatedValue\r\n                totalProdSelect.text = updTotal.toString()\r\n            } else {\r\n                Toast.makeText(this, \"You reached the maximum quantity\", Toast.LENGTH_SHORT).show()\r\n            }\r\n\r\n        }\r\n\r\n        minusBtn.setOnClickListener {\r\n            val qntyVal = qnty.text.toString().toInt()\r\n            if (qntyVal != 0) {\r\n                val updatedValue = qntyVal - 1\r\n                qnty.text = updatedValue.toString()\r\n                val updTotal = priceProd * updatedValue\r\n                totalProdSelect.text = updTotal.toString()\r\n            }\r\n        }\r\n\r\n        requestCamera =\r\n            registerForActivityResult(ActivityResultContracts.RequestPermission()) { isGranted ->\r\n                if (isGranted) {\r\n                    val intent = Intent(this@PosActivity, ScanAddPos::class.java)\r\n                    startActivity(intent)\r\n                } else {\r\n                    Toast.makeText(this@PosActivity, \"Permission not Granted\", Toast.LENGTH_SHORT)\r\n                        .show()\r\n                }\r\n            }\r\n\r\n        scanBtn.setOnClickListener {\r\n            requestCamera.launch(android.Manifest.permission.CAMERA)\r\n        }\r\n\r\n    }\r\n\r\n    private fun fetchInformationFromFirebase(barcode: String) {\r\n        val query: Query = databaseReference.orderByChild(\"itemBarcode\").equalTo(barcode)\r\n        query.addValueEventListener(object : ValueEventListener {\r\n            override fun onDataChange(dataSnapshot: DataSnapshot) {\r\n                val prodNameSelect: TextView = findViewById(R.id.prodname)\r\n                val prodPriceSelect: TextView = findViewById(R.id.price)\r\n                if (dataSnapshot.exists()) {\r\n                    for (productSnapshot in dataSnapshot.children) {\r\n                        val nameProd: String =\r\n                            productSnapshot.child(\"itemName\").value.toString()\r\n                        priceProd =\r\n                            productSnapshot.child(\"itemPrice\").value.toString().toInt()\r\n\r\n                        prodNameSelect.text = nameProd\r\n                        prodPriceSelect.text = \"\\u20B1 $priceProd\"\r\n                    }\r\n                } else {\r\n                    prodNameSelect.text = \"Product Not Found\"\r\n                    prodPriceSelect.text = \"\"\r\n                }\r\n            }\r\n\r\n            override fun onCancelled(databaseError: DatabaseError) {\r\n                Toast.makeText(\r\n                    applicationContext,\r\n                    \"Error fetching data from Firebase.\",\r\n                    Toast.LENGTH_SHORT\r\n                ).show()\r\n            }\r\n        })\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/scanit/PosActivity.kt b/app/src/main/java/com/example/scanit/PosActivity.kt
--- a/app/src/main/java/com/example/scanit/PosActivity.kt	(revision eff40fa6ce60f42fe55c2cb174fe3710fcae10c6)
+++ b/app/src/main/java/com/example/scanit/PosActivity.kt	(date 1686754776152)
@@ -28,6 +28,7 @@
 class PosActivity : AppCompatActivity() {
 
     private lateinit var databaseReference: DatabaseReference
+    private lateinit var databaseReferencePOS: DatabaseReference
     private lateinit var requestCamera: ActivityResultLauncher<String>
     private lateinit var recyclerView: RecyclerView
     private lateinit var adapter: buyAdapter
@@ -62,7 +63,7 @@
         recyclerView.adapter = adapter
 
         databaseReference = FirebaseDatabase.getInstance().getReference("Products")
-
+        databaseReferencePOS = FirebaseDatabase.getInstance().getReference("Order")
         val BCGet  = intent.getStringExtra("itemBarcode") ?: ""
         val BCprod: String = BCGet.toString()
         val nameProd = intent.getStringExtra("itemName") ?: ""
@@ -160,9 +161,11 @@
             val price = priceProd.toString().toDouble()
             val total = quantity * price
 
+
             // Create a new Item object
             val item = buyModel(barcode, name, quantity, price, total)
-
+            val id= databaseReferencePOS.push().key
+            databaseReferencePOS.child(id.toString()).setValue(item)
             // Add the new item to the list
             viewModel.addItem(item)
 
Index: app/src/main/java/com/example/scanit/ScanAddPos.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.scanit\r\n\r\nimport android.Manifest\r\nimport android.content.Context\r\nimport android.content.Intent\r\nimport android.content.pm.PackageManager\r\nimport android.graphics.BitmapFactory\r\nimport android.hardware.camera2.CameraAccessException\r\nimport android.hardware.camera2.CameraManager\r\nimport android.net.Uri\r\nimport android.os.Bundle\r\nimport android.provider.MediaStore\r\nimport android.widget.Button\r\nimport android.widget.Toast\r\nimport androidx.activity.result.contract.ActivityResultContracts\r\nimport androidx.appcompat.app.AppCompatActivity\r\nimport androidx.core.app.ActivityCompat\r\nimport androidx.core.content.ContextCompat\r\nimport com.example.scanit.ProductViewActivity\r\nimport com.google.android.gms.vision.Frame\r\nimport com.google.android.gms.vision.barcode.Barcode\r\nimport com.google.android.gms.vision.barcode.BarcodeDetector\r\nimport com.google.firebase.database.*\r\nimport com.google.zxing.ResultPoint\r\nimport com.journeyapps.barcodescanner.BarcodeCallback\r\nimport com.journeyapps.barcodescanner.BarcodeResult\r\nimport com.journeyapps.barcodescanner.CaptureManager\r\nimport com.journeyapps.barcodescanner.DecoratedBarcodeView\r\n\r\nclass ScanAddPos : AppCompatActivity() {\r\n    private lateinit var barcodeView: DecoratedBarcodeView\r\n    private lateinit var captureManager: CaptureManager\r\n    private lateinit var databaseReference: DatabaseReference\r\n    private lateinit var uploadButton: Button\r\n    private var cameraId: String? = null\r\n    private var cameraManager: CameraManager? = null\r\n\r\n    private val galleryLauncher =\r\n        registerForActivityResult(ActivityResultContracts.StartActivityForResult()) { result ->\r\n            if (result.resultCode == RESULT_OK) {\r\n                val data: Intent? = result.data\r\n                val imageUri: Uri? = data?.data\r\n                imageUri?.let {\r\n                    val imagePath = getImagePathFromUri(imageUri)\r\n                    // ... continue with image processing logic\r\n\r\n                    // Pass the image path to the barcode detection method\r\n                    detectBarcodeFromImage(imagePath)\r\n                }\r\n            }\r\n        }\r\n\r\n    override fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r\n        setContentView(R.layout.activity_scan_add_pos)\r\n\r\n        // Initialize database reference\r\n        databaseReference = FirebaseDatabase.getInstance().getReference(\"Products\")\r\n\r\n        barcodeView = findViewById(R.id.barcode_scanner)\r\n\r\n        // Initialize CaptureManager\r\n        captureManager = CaptureManager(this, barcodeView)\r\n        captureManager.initializeFromIntent(intent, savedInstanceState)\r\n        captureManager.decode()\r\n\r\n        cameraManager = getSystemService(Context.CAMERA_SERVICE) as CameraManager\r\n        cameraId = cameraManager?.cameraIdList?.get(0)\r\n\r\n        // Set the barcode callback\r\n        barcodeView.decodeContinuous(object : BarcodeCallback {\r\n            override fun barcodeResult(result: BarcodeResult?) {\r\n                result?.text?.let { itemBarcode ->\r\n                    fetchItemData(itemBarcode)\r\n                }\r\n            }\r\n\r\n            override fun possibleResultPoints(resultPoints: MutableList<ResultPoint>?) {\r\n                // Handle possible result points\r\n            }\r\n        })\r\n\r\n        // Set up the upload button\r\n        uploadButton = findViewById(R.id.uploadButton)\r\n        uploadButton.setOnClickListener {\r\n            openGalleryForImage()\r\n        }\r\n\r\n        // Set up the flashlight button\r\n        val button = findViewById<Button>(R.id.flashlightButton)\r\n        button.setOnClickListener {\r\n            toggleFlashlight()\r\n        }\r\n    }\r\n\r\n    private fun openGalleryForImage() {\r\n        val intent = Intent(Intent.ACTION_PICK)\r\n        intent.type = \"image/*\"\r\n        galleryLauncher.launch(intent)\r\n    }\r\n\r\n    private fun getImagePathFromUri(uri: Uri): String? {\r\n        val projection = arrayOf(MediaStore.Images.Media.DATA)\r\n        val cursor = contentResolver.query(uri, projection, null, null, null)\r\n        cursor?.use {\r\n            if (it.moveToFirst()) {\r\n                val columnIndex = it.getColumnIndexOrThrow(MediaStore.Images.Media.DATA)\r\n                return it.getString(columnIndex)\r\n            }\r\n        }\r\n        return null\r\n    }\r\n\r\n    private fun detectBarcodeFromImage(imagePath: String?) {\r\n        val barcodeDetector = BarcodeDetector.Builder(this)\r\n            .setBarcodeFormats(Barcode.EAN_13)\r\n            .build()\r\n\r\n        if (!barcodeDetector.isOperational) {\r\n            showToast(\"Could not set up barcode detector\")\r\n            return\r\n        }\r\n\r\n        val bitmap = BitmapFactory.decodeFile(imagePath)\r\n        val frame = Frame.Builder().setBitmap(bitmap).build()\r\n        val barcodes = barcodeDetector.detect(frame)\r\n\r\n        if (barcodes.size() > 0) {\r\n            val barcode = barcodes.valueAt(0)\r\n            val barcodeValue = barcode.rawValue\r\n\r\n            // Query the database to check if the barcode exists\r\n            val query = databaseReference.orderByChild(\"itemBarcode\").equalTo(barcodeValue)\r\n            query.addListenerForSingleValueEvent(object : ValueEventListener {\r\n                override fun onDataChange(dataSnapshot: DataSnapshot) {\r\n                    if (dataSnapshot.exists()) {\r\n                        val itemDataSnapshot = dataSnapshot.children.first()\r\n\r\n                        val itemName = itemDataSnapshot.child(\"itemName\").getValue(String::class.java)\r\n                        val itemPrice = itemDataSnapshot.child(\"itemPrice\").getValue(Int::class.java)\r\n                        val itemCode = itemDataSnapshot.child(\"itemBarcode\").getValue(String::class.java)\r\n                        val itemQty = itemDataSnapshot.child(\"itemQuantity\").getValue(Int::class.java)\r\n\r\n                        val intent = Intent(applicationContext, PosActivity::class.java)\r\n                        intent.putExtra(\"itemName\", itemName)\r\n                        intent.putExtra(\"itemPrice\", itemPrice)\r\n                        intent.putExtra(\"itemBarcode\", itemCode)\r\n                        intent.putExtra(\"itemQuantity\", itemQty)\r\n\r\n                        startActivity(intent)\r\n                    } else {\r\n                        // Barcode does not exist in the database\r\n                        // Handle the case when barcode does not exist\r\n                        // ...\r\n                        showToast(\"Barcode does not exist in the database\")\r\n                    }\r\n                }\r\n\r\n                override fun onCancelled(databaseError: DatabaseError) {\r\n                    // Handle database error\r\n                    // ...\r\n                    showToast(\"Error querying the database\")\r\n                }\r\n            })\r\n        } else {\r\n            showToast(\"No barcode detected in the image\")\r\n        }\r\n    }\r\n\r\n    private fun fetchItemData(itemBarcode: String) {\r\n        val query = databaseReference.orderByChild(\"itemBarcode\").equalTo(itemBarcode)\r\n\r\n        query.addListenerForSingleValueEvent(object : ValueEventListener {\r\n            override fun onDataChange(dataSnapshot: DataSnapshot) {\r\n                if (dataSnapshot.exists()) {\r\n                    val itemDataSnapshot = dataSnapshot.children.first()\r\n\r\n                    val itemName = itemDataSnapshot.child(\"itemName\").getValue(String::class.java)\r\n                    val itemPrice = itemDataSnapshot.child(\"itemPrice\").getValue(Int::class.java)\r\n                    val itemCode = itemDataSnapshot.child(\"itemBarcode\").getValue(String::class.java)\r\n                    val itemQty = itemDataSnapshot.child(\"itemQuantity\").getValue(Int::class.java)\r\n\r\n                    val intent = Intent(applicationContext, PosActivity::class.java)\r\n                    intent.putExtra(\"itemName\", itemName)\r\n                    intent.putExtra(\"itemPrice\", itemPrice)\r\n                    intent.putExtra(\"itemBarcode\", itemCode)\r\n                    intent.putExtra(\"itemQuantity\", itemQty)\r\n\r\n                    startActivity(intent)\r\n                } else {\r\n                    Toast.makeText(this@ScanAddPos, \"Barcode not found in the database\", Toast.LENGTH_SHORT).show()\r\n                    // Barcode not found in the database\r\n                    // Handle the case when barcode is not found\r\n                    // ...\r\n                }\r\n            }\r\n\r\n            override fun onCancelled(databaseError: DatabaseError) {\r\n                // Handle database error\r\n                // ...\r\n            }\r\n        })\r\n    }\r\n\r\n    private fun toggleFlashlight() {\r\n        val cameraPermission = Manifest.permission.CAMERA\r\n        if (ContextCompat.checkSelfPermission(this, cameraPermission) != PackageManager.PERMISSION_GRANTED) {\r\n            ActivityCompat.requestPermissions(this, arrayOf(cameraPermission), 1)\r\n        } else {\r\n            try {\r\n                val cameraId = cameraManager?.cameraIdList?.firstOrNull()\r\n                if (cameraId != null) {\r\n                    cameraManager?.setTorchMode(cameraId, true)\r\n                    showToast(\"Flashlight turned on\")\r\n                }\r\n            } catch (e: CameraAccessException) {\r\n                e.printStackTrace()\r\n                showToast(\"Failed to turn on flashlight\")\r\n            }\r\n        }\r\n    }\r\n\r\n    private fun showToast(message: String) {\r\n        Toast.makeText(this, message, Toast.LENGTH_SHORT).show()\r\n    }\r\n\r\n    override fun onResume() {\r\n        super.onResume()\r\n        // Check and request camera permission if not granted\r\n        if (ContextCompat.checkSelfPermission(\r\n                this,\r\n                Manifest.permission.CAMERA\r\n            ) != PackageManager.PERMISSION_GRANTED\r\n        ) {\r\n            ActivityCompat.requestPermissions(\r\n                this,\r\n                arrayOf(Manifest.permission.CAMERA),\r\n                CAMERA_PERMISSION_REQUEST\r\n            )\r\n        } else {\r\n            captureManager.onResume()\r\n        }\r\n    }\r\n\r\n    override fun onPause() {\r\n        super.onPause()\r\n        captureManager.onPause()\r\n    }\r\n\r\n    override fun onDestroy() {\r\n        super.onDestroy()\r\n        captureManager.onDestroy()\r\n    }\r\n\r\n    override fun onRequestPermissionsResult(\r\n        requestCode: Int,\r\n        permissions: Array<out String>,\r\n        grantResults: IntArray\r\n    ) {\r\n        super.onRequestPermissionsResult(requestCode, permissions, grantResults)\r\n        if (requestCode == CAMERA_PERMISSION_REQUEST) {\r\n            if (grantResults.isNotEmpty() && grantResults[0] == PackageManager.PERMISSION_GRANTED) {\r\n                captureManager.onResume()\r\n            } else {\r\n                // Handle camera permission denial\r\n                // ...\r\n            }\r\n        }\r\n    }\r\n\r\n    companion object {\r\n        private const val CAMERA_PERMISSION_REQUEST = 100\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/scanit/ScanAddPos.kt b/app/src/main/java/com/example/scanit/ScanAddPos.kt
--- a/app/src/main/java/com/example/scanit/ScanAddPos.kt	(revision eff40fa6ce60f42fe55c2cb174fe3710fcae10c6)
+++ b/app/src/main/java/com/example/scanit/ScanAddPos.kt	(date 1686753321085)
@@ -31,6 +31,7 @@
     private lateinit var barcodeView: DecoratedBarcodeView
     private lateinit var captureManager: CaptureManager
     private lateinit var databaseReference: DatabaseReference
+    private lateinit var databaseReferencePOS: DatabaseReference
     private lateinit var uploadButton: Button
     private var cameraId: String? = null
     private var cameraManager: CameraManager? = null
@@ -56,6 +57,7 @@
 
         // Initialize database reference
         databaseReference = FirebaseDatabase.getInstance().getReference("Products")
+        databaseReferencePOS = FirebaseDatabase.getInstance().getReference("Order")
 
         barcodeView = findViewById(R.id.barcode_scanner)
 
